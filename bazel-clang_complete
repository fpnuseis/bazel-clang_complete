#!/usr/bin/env python2.7
#
# A script to generate .clang_complete from bazel C++ target.
# With .clang_complete file, it can be opened directly from CLion.
#
# Usage:
# $ bazel-clang_complete
#
# CMake also support generating other IDE project files such as Eclipse and Xcode.
# Run following command additionally to generate Xcode project:
#
# $ cmake -G Xcode
#
# DON'T USE CMAKE TO BUILD THE PROJECT. It is not tested and likely to fail.

import argparse
from os import path
import os
import re
import xml.etree.ElementTree as ET
import subprocess
import sys

EXTERNAL_PATTERN = re.compile("^@(.*)\\/\\/")
SOURCE_EXTENSION = set([".h", ".hpp", ".hh", ".hxx", ".c", ".cc", ".cpp", ".cxx"])

def QueryTargets():
  return ' union '.join(FLAGS.targets)

def Exists(fn):
  try:
    os.stat(fn)
    return True
  except OSError:
    sys.stderr.write("Skipping %s ...\n" % fn)
    return False

def GetBasePath(fn):
  fn = fn.replace('/:', '/')
  fn = fn.replace(':', '/')
  if EXTERNAL_PATTERN.match(fn):
    fn = EXTERNAL_PATTERN.sub("external/\\1/", fn)
  return fn.lstrip('/')

def ConvertGeneratedPath(fn):
  bazel_root = 'bazel-' + FLAGS.project
  if FLAGS.mac_debug:
    genfiles_root = path.join('bazel-out', 'local-dbg', 'bin')
  if not FLAGS.mac_debug:
    genfiles_root = 'bazel-bin'
  return path.realpath(path.join(genfiles_root, GetBasePath(fn)))

def ConvertExternalPath(fn):
  bazel_root = 'bazel-' + FLAGS.project
  if not FLAGS.mac_debug and EXTERNAL_PATTERN.match(fn):
    return path.join(bazel_root, GetBasePath(fn))
  return path.realpath(GetBasePath(fn))

def run_bazel(args):
  sa = os.getenv("BAZEL_STARTUP_ARGS")
  if sa is not None:
    args = sa.split() + args

  args = ['bazel'] + args
  print args
  return subprocess.check_output(args)

def ExtractIncludes():
  query = 'kind(cc_library, deps(kind("cc_.* rule", %s)))' % QueryTargets()
  includes = []
  xml = run_bazel(['query', '--package_path', '%workspace%:/source', '--noimplicit_deps', query, '--output', 'xml'])
  tree = ET.fromstring(xml)
  for e in tree.findall(".//list[@name='includes']/.."):
    prefix = e.attrib['name'].split(':')[0]
    for val in [i.attrib['value'] for i in e.findall("list[@name='includes']/string")] + ["."]:
      geninc = path.realpath(path.join(ConvertGeneratedPath(prefix), val))
      includes.append(geninc)

      inc = path.realpath(path.join(ConvertExternalPath(prefix), val))
      includes.append(inc)

  for e in tree.findall(".//string[@name='include_prefix']/.."):
    prefix = e.attrib['name'].split(':')[0]
    include_prefix = e.find("string[@name='include_prefix']").attrib['value']
    geninc = path.realpath(path.join(ConvertGeneratedPath(prefix), val))
    if geninc.endswith(include_prefix):
      geninc = geninc[:-len(include_prefix)]
      includes.append(geninc)
    inc = path.realpath(path.join(ConvertExternalPath(prefix), val))
    if inc.endswith(include_prefix):
      inc = inc[:-len(include_prefix)]
      includes.append(inc)

  for d in os.listdir('bazel-%s/external' % FLAGS.project):
    if os.path.isdir('bazel-%s/external/%s' % (FLAGS.project, d)):
      includes.append(path.realpath('bazel-%s/external/%s' % (FLAGS.project, d)))
    if os.path.isdir('bazel-bin/external/%s' % d):
      includes.append(path.realpath('bazel-bin/external/%s' % d))

  return set(includes)

def ExtractDefines():
  query = 'attr("defines", "", deps(kind("cc_.* rule", %s)))' % QueryTargets()
  xml = run_bazel(['query', '--package_path', '%workspace%:/source', '--noimplicit_deps', query, '--output', 'xml'])
  tree = ET.fromstring(xml)
  defines = []
  for e in tree.findall(".//list[@name='defines']/string"):
    defines.append(e.attrib['value'])
  return set(defines)

def ExtractCopts():
  query = 'attr("copts", "", deps(kind("cc_.* rule", %s)))' % QueryTargets()
  xml = run_bazel(['query', '--package_path', '%workspace%:/source', '--noimplicit_deps', query, '--output', 'xml'])
  tree = ET.fromstring(xml)
  copts = []
  for e in tree.findall(".//list[@name='copts']/string"):
    copts.append(e.attrib['value'])
  return set(copts)

def GenerateCLangComplete():
  if not FLAGS.skip_build:
    bazel_args=['build', '--strategy=Genrule=standalone', '--spawn_strategy=standalone', '--verbose_failures', '--package_path', '%workspace%:/source', '--action_env=HOME', '--action_env=PYTHONUSERBASE', '--jobs=4', '--show_task_finish', '-c', 'opt']
    bazel_args.extend(FLAGS.targets)
    bazel_args.extend(FLAGS.bazel_args[1:])
    run_bazel(bazel_args)

  includes = ExtractIncludes()

  copts = ExtractCopts()
  for opt in copts:
    if opt.startswith("-I-"):
      includes.add(opt[3:])
    elif opt.startswith("-I"):
      includes.add(opt[2:])

  output = FLAGS.output
  if FLAGS.mac_debug:
    file_root = run_bazel(['info', 'execution_root']).strip()
  else:
    file_root = run_bazel(['info', 'workspace']).strip()
  output = path.join(file_root, FLAGS.output)
  try:
    os.remove(output)
  except:
    pass
  with open(output, 'w') as clangcomplete:
    clangcomplete.write("-I")
    clangcomplete.write("\n-I".join(includes))
    if FLAGS.mac_debug:
      clangcomplete.write("\n-Ibazel-out/local-dbg/bin")
    else:
      clangcomplete.write("\n-I%s" % path.realpath("bazel-bin"))
    clangcomplete.write("\n-I%s\n\n" % path.realpath("."))

  if FLAGS.open:
    if sys.platform == 'darwin':
      subprocess.call(['open', output, '-a', 'CLion'])
    else:
      sys.stderr.write("Open flag is only supported in Mac.\n")
  sys.stderr.write(".clang_complete generated in following directory:\n")
  sys.stderr.write(file_root + "\n")

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description="Generate .clang_complete for IDEs from bazel targets")
  parser.add_argument('--project')
  parser.add_argument('--targets', default=['//...'], nargs='+')
  parser.add_argument('--open', action='store_true')
  parser.add_argument('--mac_debug', action='store_true')
  parser.add_argument('--skip_build', action='store_true', help="Skip build step if you have aleady built target(s)")
  parser.add_argument('--genfiles', action='store_true', help='Generate project with genfiles')
  parser.add_argument('--external', action='store_true', help='Generate project with external')
  parser.add_argument('--output', default=".clang_complete")
  parser.add_argument('bazel_args', nargs=argparse.REMAINDER)
  FLAGS = parser.parse_args()

  if FLAGS.project is None:
      prj = run_bazel(['info', 'workspace']).strip()
      FLAGS.project = os.path.basename(prj)

  GenerateCLangComplete()
